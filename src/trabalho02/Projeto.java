/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalho02;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import static java.awt.image.ImageObserver.ALLBITS;
import java.awt.image.Kernel;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lennon
 */
public class Projeto extends javax.swing.JFrame {

    /**
     * Creates new form ImagemPBM
     */
    public Projeto() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDescricao = new javax.swing.JLabel();
        painelImagem = new javax.swing.JScrollPane();
        lblImagem = new javax.swing.JLabel();
        btnAbrirImagem = new javax.swing.JButton();
        btnAplicar = new javax.swing.JButton();
        cbOperacao = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Processamento de Imagens | Trabalho 02");
        setMinimumSize(new java.awt.Dimension(800, 550));
        setName("framePrincipal"); // NOI18N
        getContentPane().setLayout(null);

        lblDescricao.setFont(new java.awt.Font("Canaro Light DEMO", 0, 14)); // NOI18N
        lblDescricao.setText("Dados da imagem:");
        getContentPane().add(lblDescricao);
        lblDescricao.setBounds(10, 470, 760, 30);

        lblImagem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        painelImagem.setViewportView(lblImagem);

        getContentPane().add(painelImagem);
        painelImagem.setBounds(10, 60, 760, 410);

        btnAbrirImagem.setFont(new java.awt.Font("Canaro Light DEMO", 0, 18)); // NOI18N
        btnAbrirImagem.setText("ABRIR IMAGEM (JPEG / PNG)");
        btnAbrirImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirImagemActionPerformed(evt);
            }
        });
        getContentPane().add(btnAbrirImagem);
        btnAbrirImagem.setBounds(10, 10, 300, 40);

        btnAplicar.setFont(new java.awt.Font("Canaro Light DEMO", 0, 14)); // NOI18N
        btnAplicar.setText("APLICAR");
        btnAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAplicar);
        btnAplicar.setBounds(660, 10, 110, 40);

        cbOperacao.setFont(new java.awt.Font("Canaro Light Italic DEMO", 0, 18)); // NOI18N
        cbOperacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tons de Cinza", "Filtro da Mediana", "Frei-Chen", "Fechamento" }));
        getContentPane().add(cbOperacao);
        cbOperacao.setBounds(316, 10, 340, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* variaveis globais */
    BufferedImage imagemOriginal, imagemAuxiliar;
    String destino = "C:/Users/lennon/Documents/NetBeansProjects/ProcessamentoDeImagens/images/";
    int[] vizinhanca = new int[9];
    
    private void btnAbrirImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirImagemActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(destino);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG ou PNG", "jpg", "png");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Abrir Imagem");
        int op = chooser.showOpenDialog(this);
        if(op == JFileChooser.APPROVE_OPTION) {
            File arq = chooser.getSelectedFile();
            String path = arq.toString();
            try {
                cbOperacao.setSelectedIndex(0);
                
                imagemOriginal = ImageIO.read(new File(path));
                imagemAuxiliar = imagemOriginal;
                //ImageIcon icon = new ImageIcon(imagemOriginal.getScaledInstance(painelImagem.getWidth(), painelImagem.getHeight(), java.awt.Image.SCALE_SMOOTH));
                ImageIcon icon = new ImageIcon(imagemOriginal);
                lblImagem.setIcon(icon);
                
                lblDescricao.setText("Dados da imagem:      Altura: " + imagemOriginal.getHeight() + 
                        " pixels      Largura: " + imagemOriginal.getWidth() + " pixels.");
                
                System.out.println("Arquivo " + arq.getName() + " aberto com sucesso.");
	    }
	    catch(IOException e){
		System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
	    }
	    catch(Exception e){
		System.out.println("Erro Exception! " + e.getMessage());
	    }                   
        }
    }//GEN-LAST:event_btnAbrirImagemActionPerformed

    private void btnAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarActionPerformed
        // TODO add your handling code here:
        int op = cbOperacao.getSelectedIndex();
        String mensagem = null;
        
        if (imagemOriginal != null) {
            switch (op) {
                case 0: /* tons de cinza */
                    tonsDeCinza(); mensagem = "Tons de cinza aplicados com sucesso!"; break;
                case 1: /* mediana */
                    filtroMediana(); mensagem = "Filtro da mediana aplicado com sucesso!"; break;
                case 2: /* frei-chen */
                    freiChen(); mensagem = "Detector de bordas de Frei e Chen aplicado com sucesso!"; break;
                case 3: /* fechamento */
                    fechamento(); mensagem = "Algoritmo ainda não implementado."; break;
                default:
                    mensagem = "Nenhuma opção foi selecionada."; break;
            }
        }
        
        JOptionPane.showMessageDialog(null, mensagem);
//        cbOperacao.setSelectedIndex(0);
    }//GEN-LAST:event_btnAplicarActionPerformed

    public void filtroMediana() {
        imagemAuxiliar = imagemOriginal;

        int width = imagemAuxiliar.getWidth();
        int height = imagemAuxiliar.getHeight();
        int pixel = 0, k = 0;
        for (int i = 1; i < width-1; i++) {
            for (int j = 1; j < height-1; j++) {
                pixel = imagemAuxiliar.getRGB(i, j);
                
                vizinhanca[0] = imagemAuxiliar.getRGB(i - 1, j - 1);
                vizinhanca[1] = imagemAuxiliar.getRGB(i, j - 1);
                vizinhanca[2] = imagemAuxiliar.getRGB(i + 1, j - 1);
                vizinhanca[3] = imagemAuxiliar.getRGB(i - 1, j);
                vizinhanca[4] = imagemAuxiliar.getRGB(i, j); /* mediana */
                vizinhanca[5] = imagemAuxiliar.getRGB(i + 1, j);
                vizinhanca[6] = imagemAuxiliar.getRGB(i - 1, j + 1);
                vizinhanca[7] = imagemAuxiliar.getRGB(i, j + 1);
                vizinhanca[8] = imagemAuxiliar.getRGB(i + 1, j + 1);
                
//                imprimeVetor();
                ordenaVetor();
//                imprimeVetor();
                
                imagemAuxiliar.setRGB(i, j, vizinhanca[4]);
            }
        }
        this.imageUpdate(imagemOriginal, ALLBITS, 0, 0, width, height);
        System.out.println("Filtro da Mediana aplicado na imagem");
    }
    
    public void freiChen() {
        imagemAuxiliar = new BufferedImage(imagemOriginal.getWidth(), imagemOriginal.getHeight(), imagemOriginal.getType());
        float[] freiChenH = {1.0f, 0.0f, -1.0f, 1.414f, 0.0f, -1.414f, 1.0f, 0.0f, -1.0f}; /* M2 */
        float[] freiChenV = {-1.0f, -1.414f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.414f, 1.0f};
        
        Kernel kernelH = new Kernel(3, 3, freiChenH);
        ConvolveOp convolveH = new ConvolveOp(kernelH, ConvolveOp.EDGE_NO_OP, null);
        convolveH.filter(imagemOriginal, imagemAuxiliar);
        Kernel kernelV = new Kernel(3, 3, freiChenV);
        ConvolveOp convolveV = new ConvolveOp(kernelV, ConvolveOp.EDGE_NO_OP, null);
        convolveV.filter(imagemOriginal, imagemAuxiliar);
        
        imagemOriginal = imagemAuxiliar;
        ImageIcon icon = new ImageIcon(imagemOriginal);
        lblImagem.setIcon(icon);

        System.out.println("Detector de bordas Frei-Chen aplicado na imagem.");
    }
    
    public void fechamento() {
        System.out.println("Algoritmo ainda não implementado.");
    }
    
    public void tonsDeCinza() {    
        imagemAuxiliar = imagemOriginal;

        int width = imagemAuxiliar.getWidth();
        int height = imagemAuxiliar.getHeight();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) { 				
                int rgb = imagemAuxiliar.getRGB(i, j);				
                int r = (int)((rgb&0x00FF0000)>>>16);
                int g = (int)((rgb&0x0000FF00)>>>8);
                int b = (int) (rgb&0x000000FF);
                int y = (int) ((0.299 * r) + (0.587 * g) + (0.114 * b));
                Color color = new Color(y, y, y);
                imagemAuxiliar.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagemOriginal, ALLBITS, 0, 0, width, height);

        System.out.println("Tons de cinza aplicados com paleta de 256 cores.");
    }
    
    private void ordenaVetor() {
        /* insertion sort */
        int chave, i, j;
        for (j = 1; j < vizinhanca.length; j++) {
            chave = vizinhanca[j];
            for (i = j - 1; (i >= 0) && (vizinhanca[i] < chave); i--) {
                vizinhanca[i+1] = vizinhanca[i];
            }
            vizinhanca[i+1] = chave;
        }
//        System.out.println("Vetor de vizinhanças ordenado.");
    }
    
    private void imprimeVetor() {
        for (int i = 0; i < vizinhanca.length; i ++) {
            System.out.println(vizinhanca[i] + " ");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Projeto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel"); /* Windows */
                    //UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel"); /* Linux */
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Projeto.class.getName()).log(Level.SEVERE, null, ex);
                }
                new Projeto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirImagem;
    private javax.swing.JButton btnAplicar;
    private javax.swing.JComboBox cbOperacao;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblImagem;
    private javax.swing.JScrollPane painelImagem;
    // End of variables declaration//GEN-END:variables
}
